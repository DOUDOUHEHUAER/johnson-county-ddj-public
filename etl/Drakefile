; Unzip the latest datasource. The output filename must be contained inside the zipfile.
data/jocodssg.sql <- data/jocodssg_08042016.zip
	unzip -o $[INPUT] $(basename "$[OUTPUT]") -d data && touch $[OUTPUT]

; Restore the sql dump to the postgres database
data/jocodssg_upload.touch <- data/jocodssg.sql [method:psql]

; Create the clean schema
etl/clean_schema.touch <- [-timecheck]
	psql -c 'create schema if not exists clean;' && touch $[OUTPUT]

; Run all the cleaning sql scripts
etl/data_cleaning.touch <- etl/data_cleaning, etl/clean_schema.touch
	for filename in $[INPUT]/*.sql; do
		psql -v ON_ERROR_STOP=1 -f "$filename"
	done && touch $[OUTPUT]

; Run superdeduper! TODO: split these steps out into their own drakefile in etl/dedupe?
; Create an entries table:
etl/dedupe/entries.touch <- etl/dedupe/entries.sql, etl/data_cleaning.touch [method:psql]

; Run superdeduper
etl/dedupe/dedupe.touch <- etl/dedupe/config.yaml, etl/dedupe/entries.touch
	superdeduper --config $[INPUT0] --db config/db_default_profile.json && touch $[OUTPUT]

; Add columns to the clean tables with the dedupe_id
etl/dedupe/apply_results.touch <- etl/dedupe/apply_results.py, etl/dedupe/dedupe.touch
	python $[INPUT0] config/db_default_profile.json && touch $[OUTPUT]

; Run all the derived processing scripts
etl/data_processing.touch <- etl/data_processing, etl/dedupe/apply_results.touch
	for filename in $[INPUT]/*.sql; do
		psql -v ON_ERROR_STOP=1 -f "$filename"
	done && touch $[OUTPUT]
